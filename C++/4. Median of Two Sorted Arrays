
#归并的merge步骤, O(m+n)
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();
        int mid = (m+n)/2;
        int pre = 0, ans=0;
        int i=0, j=0;
        for(int k=0;k<=mid;k++){
            pre = ans;
            # 由于没有哨兵，需要额外的判断索引是否合法
            if(j==n || i<m && nums1[i] <= nums2[j]){
                ans = nums1[i];
                i++;
            }
            else{
                ans = nums2[j];
                j++;
            }
        }
        return (m+n)%2==1? ans:(ans+pre)/2.0;

    }
};

#通过个数约束转换为单数组二分
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {      
        //取小的数组进行二分搜索。
        if(nums1.size() > nums2.size())
            return findMedianSortedArrays(nums2, nums1);

        int m = nums1.size();
        int n = nums2.size();

        if(m==0) return (nums2[n/2]+nums2[(n-1)/2])/2.0;
        int mid = (m+n)/2; //比真正的中间值小1
        int left = 0, right=m;
        int cut1, cut2, L1, L2, R1, R2;
        while(true){
            //cut1-1,cut1。左边共cut1个数字。cut1+cut2=mid个左值
            cut1 = left + (right-left)/2;
            cut2 = mid-cut1;
            //用最大最小，避免处理边界
            L1 = cut1==0? INT_MIN:nums1[cut1-1];
            L2 = cut2==0? INT_MIN:nums2[cut2-1];
            R1 = cut1==m? INT_MAX:nums1[cut1];
            R2 = cut2==n? INT_MAX:nums2[cut2];

            if(L1>R2) right = cut1-1;
            else if(L2>R1) left = cut1+1;
            else{
                //如果是奇数个, mid比真正的中值少一个,所以在右边取
                if((m+n)%2==1) return min(R1, R2);
                else return ((max(L1, L2)+min(R1, R2))/2.0);
            }

        }
    }
};
