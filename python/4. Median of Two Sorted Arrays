# 归并的merge步骤，O(m+n)
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        m, n = len(nums1), len(nums2)
        #奇数时候，mid是中间值索引，偶数是后一个，所以需要pre
        mid = (m+n)//2
        # 添加哨兵，减少判断次数
        nums1.append(float('inf'))
        nums2.append(float('inf'))
        i, j = 0, 0
        pre = res = 0
        for k in range(mid+1):
            pre = res
            if nums1[i] <= nums2[j]:
                res = nums1[i]
                i += 1
            else:
                res = nums2[j]
                j += 1
        #恢复原样
        nums1.pop()
        nums2.pop()
        return res if (m+n) % 2 == 1 else (res+pre)/2
        
        
# 巧妙地通过数量上的约束，将两个数组的查找变成一个数组的二分查找
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        # m,n中选择小的那个搜索
        if len(nums1) > len(nums2):
            return self.findMedianSortedArrays(nums2, nums1)
        m, n = len(nums1), len(nums2)

        #如果一个为空，直接返回另一个的中值
        if m == 0:
            return (nums2[n//2]+nums2[(n-1)//2])/2
        MAX_Value = float('inf')
        MIN_VALUE = -float('inf')
        mid = size // 2 #比实际的中间值少了一个
        cutL, cutR = 0, m
        while True:
            # 分成cut1-1， cut1。左边有cut1个数字
            cut1 = cutL + (cutR-cutL) // 2
            # 分成cut2-1， cut2。右边有cut2个数字
            cut2 = mid - cut1

            L1 = MIN_VALUE if cut1 == 0 else nums1[cut1-1]
            L2 = MIN_VALUE if cut2 == 0 else nums2[cut2-1]
            R1 = MAX_Value if cut1 == m else nums1[cut1]
            R2 = MAX_Value if cut2 == n else nums2[cut2]

            if L1 > R2:
                cutR = cut1-1
            elif L2>R1:
                cutL = cut1+1
            else:
                if size % 2 == 0:
                    return (max(L1, L2)+min(R1, R2)) /2
                else:
                    # 由于mid比实际的中值少了一个，所以在右边选择
                    return min(R1, R2)
