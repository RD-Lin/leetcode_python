//用一个辅助栈，存储最小值
//每放入\弹出一个元素，同步更新最小栈
class MinStack {

    Stack<Integer> stack = new Stack<Integer>();
    Stack<Integer> minStack = new Stack<Integer>();

    /** initialize your data structure here. */
    public MinStack() {
        
    }
    
    public void push(int x) {
        if(stack.isEmpty() || x<=minStack.peek())
        {
            stack.push(x);
            minStack.push(x);
        }
        else
        {
            stack.push(x);
        }
    }
    
    public void pop() {
        int i = stack.pop();
        if(i == minStack.peek())
        {
            minStack.pop();
        }
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return minStack.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
